# -*- coding: utf-8 -*-
"""polynomial_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19r19aTui0uw1tZSQJVK2pBkhGhF2hjFj

# Polynomial Regression

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

"""## Importing the dataset"""

dataset = pd.read_csv('Projected_Salaries.csv')
X = dataset.iloc[:, 1:-1].values
y = dataset.iloc[:, -1].values

dataset.head()

dataset.describe()

"""## Training the Polynomial Regression model on the whole dataset

Choosing the random degree = 4
"""

from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree = 5)
X_poly = poly_reg.fit_transform(X)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly, y)

"""## Visualising the Polynomial Regression results"""

plt.scatter(X, y, color = 'red')
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)), color = 'blue')
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('Position level')
plt.ylabel('Salary')
plt.show()

"""## Predicting a new result with Linear Regression

## Predicting a new result with Polynomial Regression
"""

lin_reg_2.predict(poly_reg.fit_transform([[6.5]]))

"""## Choosing a optimal degree.
Trying between 1 and 10
And training the Model and predicting with the Best Degree
"""

# Define a function to create polynomial regression models with different degrees
def polynomial_regression(degree):
    model = Pipeline([
        ('poly_features', PolynomialFeatures(degree=degree)),
        ('linear_regression', LinearRegression())
    ])
    return model

# Evaluate models with different degrees using cross-validation
degrees = range(1, 10)  # Adjust the range as needed
mse_scores = []
for degree in degrees:
    model = polynomial_regression(degree)
    scores = cross_val_score(model, X, y, cv=5, scoring='neg_mean_squared_error')
    mse_scores.append(-np.mean(scores))

# Choose the degree with the lowest mean squared error
best_degree = degrees[np.argmin(mse_scores)]
print("Best degree : ", best_degree)
best_model = polynomial_regression(best_degree)

# Train the best model on the entire training set
best_model.fit(X, y)

# Make predictions on the test set
y_pred = best_model.predict([[6.5]])
print(y_pred)

"""## Finding the best Degree and Regularization - Ridge (L2) and Lasso (L1)"""

from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso

# Define a function to create polynomial regression models with different degrees and regularization
def polynomial_regression_with_regularization(degree, alpha, regularization_type='ridge'):
    if regularization_type == 'ridge':
        regressor = Ridge(alpha=alpha)
    elif regularization_type == 'lasso':
        regressor = Lasso(alpha=alpha)
    else:
        raise ValueError("Invalid regularization type")

    model = Pipeline([
        ('poly_features', PolynomialFeatures(degree=degree)),
        ('linear_regression', regressor)
    ])
    return model

# Evaluate models with different degrees and regularization parameters
degrees = range(1, 10)
alphas = [0.01, 0.1, 1, 10]  # Adjust alpha values as needed
regularization_types = ['ridge', 'lasso']

best_score = -np.inf
best_degree = None
best_alpha = None
best_regularization_type = None

for degree in degrees:
    for alpha in alphas:
        for regularization_type in regularization_types:
            model = polynomial_regression_with_regularization(degree, alpha, regularization_type)
            scores = cross_val_score(model, X, y, cv=5, scoring='neg_mean_squared_error')
            mean_score = -np.mean(scores)
            if mean_score > best_score:
                best_score = mean_score
                best_degree = degree
                best_alpha = alpha
                best_regularization_type = regularization_type

# Train the best model on the entire training set
best_model = polynomial_regression_with_regularization(best_degree, best_alpha, best_regularization_type)
best_model.fit(X, y)

print("best degree :", best_degree)
print("best model :", best_model)

print("predicted salary :", best_model.predict([[6.5]]))

